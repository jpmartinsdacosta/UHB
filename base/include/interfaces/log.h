#ifndef LOG_H
#define LOG_H

#define SEND_RFC5424  "$ActionForwardDefaultTemplate RSYSLOG_SyslogProtocol23Format"
#define WRITE_RFC5424 "$ActionFileDefaultTemplate RSYSLOG_SyslogProtocol23Format"

/**
 * @file log.h
 * @brief This file provides headers for functions regarding logging using rsyslog.
 */

/**
 * Functions to check the existence and status of rsyslog
 */

/**
 * @brief Checks if a logging daemon is present in the system.
 * @return True if detected, false otherwise.
 */
bool log_exists();
 
/**
 * @brief Checks if the logging daemon is running.
 * @returns True if the daemon is running, false otherwise.
 */
bool check_logging_status();

/**
 * @brief Restarts the rsyslog daemon. Used when applying log configuration.
 * @returns True if sucessful, false otherwise.
 */
bool restart_logging_daemon();

/**
 * Functions regarding the RFC protocol being used.
 */

/**
 * @brief Detects if RFC5424 syslog protcol is being used when writing logs to the system
 * and sending logs to remote servers. It modifies the rfc_5424_write and send booleans
 * respectively.
 */
void detect_rfc5424();

/**
 * @brief Prompts the user whether to use RFC5424 when writing and/or sending logs.
 * It modifies the rfc_5424_write and send booleans respectively.
 */
void apply_rfc5424();

/**
 * @brief Initializes the logging module. This is done by copying the original config file(s)
 * to the uhb config folder to be modified by the user. Once modified, these are copied back
 * to the services configuration folder and its respective daemon is reset.
 * 
 * This function also copies the original configuration to the backup folder. If needed, instead
 * of copying from the original configuration file to UHB, it can be done from backup via the
 * boolean parameter in this function.
 * @param copy_from_backup Boolean to determine whether to copy from backup.
 */
void initialize_logging(bool copy_from_backup);

/**
 * @brief Applies the logging configuration. This is done by copying the modified log.conf file
 * back to the original rsyslog.conf and restarting the daemon.
 */
bool apply_logging_configuration();

/**
 * Functions to manage logging inside the system
 */

 /**
  * @brief Adds logging rules to be used in the system. It prompts the user the types of messages
  * to be logged and where these should be stored. This information is then appended to the log.conf
  * file. If any filepath where logs are stored is missing, it is inmediately created.
  */
void add_local_logging();

// Configure log rotation settings using logrotate?

/**
 * @brief Enables the UDP module for listening to rsyslog logs via UDP.
 * This is done by uncommenting the imudp module lines.
 */
void enable_udp_module();

/**
 * @brief Enables the TCP module for listening to rsyslog logs via TCP.
 * This is done by uncommenting the imtcp module lines.
 */
void enable_tcp_module();

/**
 * @brief Disables the UDP module for listening to rsyslog logs via UDP.
 * This is done by commenting the imudp module lines.
 */
void disable_udp_module();

/**
 * @brief Disables the TCP module for listening to rsyslog logs via UDP.
 * This is done by commenting the imtcp module lines.
 */
void disable_tcp_module();

/**
 * @brief Edits the port used in the UDP module.
 * @param port The port to be used, in string format.
 * @returns True if successful, false otherwise.
 */
bool edit_udp_module(const char *port);

/**
 * @brief Edits the port used in the TCP module.
 * @param port The port to be used, in string format.
 * @returns True if successful, false otherwise.
 */
bool edit_tcp_module(const char *port);

/**
 * @brief Configures rsyslog to listen and store incoming logs to the system.
 * The user is prompted whether to use UDP and/or TCP.
 */
void set_log_reception_service();

/**
 * @brief Sets a location in where to store incoming logs.
 */
void add_log_reception_rule();

/**
 * @brief Adds configuration which forwards logs generated by the system to a remote
 * log aggregation server.
 */
void add_log_forwarding_rule();

void view_logging_configuration();

void view_logging_manual();

#endif // LOG_H