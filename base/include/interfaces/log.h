#ifndef LOG_H
#define LOG_H

/**
 * @file log.h
 * @brief This file provides headers for functions regarding logging using rsyslog.
 */

/**
 * Functions to check the existence and status of rsyslog
 */

/**
 * @brief Checks if a logging daemon is present in the system.
 * @return True if detected, false otherwise.
 */
bool log_exists();
 
/**
 * @brief Checks if the logging daemon is running.
 * @returns True if the daemon is running, false otherwise.
 */
bool check_logging_status();

/**
 * @brief Restarts the rsyslog daemon. Used when applying log configuration.
 * @returns True if sucessful, false otherwise.
 */
bool restart_logging_daemon();

/**
 * Functions regarding the RFC protocol being used.
 */

/**
 * @brief Detects if RFC5424 syslog protcol is being used when writing logs to the system
 * and sending logs to remote servers. It modifies the rfc_5424_write and send booleans
 * respectively.
 */
void detect_rfc5424();

/**
 * @brief Prompts the user whether to use RFC5424 when writing and/or sending logs.
 * It modifies the rfc_5424_write and send booleans respectively.
 */
void apply_rfc5424();

/**
 * @brief Auxiliary function that uncomments the UDP listening module.
 */
void enable_udp_module();

/**
 * @brief Auxiliary function that uncomments the TCP listening module.
 */
void enable_tcp_module();


/**
 * @brief Initializes rsyslog for UHB. If rsyslog is detected and enabled, UHB does 2 things:
 * 1. It copies the original rsyslog.conf file to the log.conf file and to the templates folder.
 * 2. It detects and applies whether log.conf has RFC5424 enabled for writing or sending logs.
 * If rsyslog is detected, but not enabled, the user is warned.
 */
void initialize_logging();

/**
 * @brief Applies the logging configuration. This is done by copying the modified log.conf file
 * back to the original rsyslog.conf and restarting the daemon.
 */
bool apply_logging_config();

/**
 * Functions to manage logging inside the system
 */

 /**
  * @brief Adds logging rules to be used in the system. It prompts the user the types of messages
  * to be logged and where these should be stored. This information is then appended to the log.conf
  * file. If any filepath where logs are stored is missing, it is inmediately created.
  */
void add_local_logs();

// Configure log rotation settings

// Configure log levels

/**
 * @brief Auxiliary function that finds, uncomments and changes the UDP module in rsyslog.
 * @param port The port to be used, in string format.
 * @returns True if successful, false otherwise.
 */
bool edit_udp_module(const char *port);

/**
 * @brief Auxiliary function that finds, uncomments and changes the TCP module in rsyslog.
 * @param port The port to be used, in string format.
 * @returns True if successful, false otherwise.
 */
bool edit_tcp_module(const char *port);

/**
 * @brief Configures rsyslog to listen and store incoming logs to the system.
 * The user is prompted whether to use UDP and/or TCP.
 */
void set_log_reception_service();

/**
 * @brief Sets a location in where to store incoming logs.
 */
void add_log_reception_rule();

/**
 * @brief Adds configuration which forwards logs generated by the system to a remote
 * log aggregation server.
 */
void add_log_forwarding_rule();

#endif // LOG_H